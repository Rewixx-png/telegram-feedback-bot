import asyncio
import logging

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart

from database import init_db, get_topic_id, set_topic_id, find_user_by_topic

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN_FILE = "token.txt"
OWNER_ID    = 7485721661
LOG_CHAT_ID = -1002765837683
# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---

logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
try:
    with open(TOKEN_FILE, "r") as f:
        TOKEN = f.read().strip()
except FileNotFoundError:
    logging.critical(f"–§–∞–π–ª {TOKEN_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –Ω–µ–≥–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.")
    exit()

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp  = Dispatcher()

@dp.message(CommandStart())
async def handle_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å."
    )

@dp.message(F.chat.id == LOG_CHAT_ID, F.from_user.id == OWNER_ID)
async def handle_admin_reply(message: types.Message):
    if not message.reply_to_message or not message.message_thread_id:
        return

    topic_id = message.message_thread_id
    user_id_to_reply = await find_user_by_topic(topic_id)

    if not user_id_to_reply:
        await message.reply("‚ö†Ô∏è –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏, –∫–∞–∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—Ç–∏—Ç—å.")
        return

    try:
        if message.text:
            await bot.send_message(chat_id=user_id_to_reply, text=message.text)
        else:
            await bot.copy_message(
                chat_id=user_id_to_reply,
                from_chat_id=LOG_CHAT_ID,
                message_id=message.message_id
            )
        logging.info(f"–û—Ç–≤–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_reply}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç—É: {e}")
        await message.reply(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
        )

@dp.message(F.chat.type == "private")
async def handle_user_message(message: types.Message):
    user_id = message.from_user.id

    if user_id == OWNER_ID:
        await message.answer(
            "–í—ã –≤–ª–∞–¥–µ–ª–µ—Ü. –û—Ç–≤–µ—á–∞–π—Ç–µ –≤ –≥—Ä—É–ø–ø–µ –ª–æ–≥–æ–≤."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º topic
    topic_id = await get_topic_id(user_id)
    if topic_id is None:
        try:
            topic_name = f"–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name} (ID: {user_id})"
            created = await bot.create_forum_topic(
                chat_id=LOG_CHAT_ID,
                name=topic_name
            )
            topic_id = created.message_thread_id
            await set_topic_id(user_id, topic_id)
            logging.info(f"–°–æ–∑–¥–∞–Ω —Ç–æ–ø–∏–∫ {topic_id} –¥–ª—è {user_id}")

            info = (
                f"<b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!</b>\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}\n"
                f"ID: <code>{user_id}</code>"
            )
            await bot.send_message(
                chat_id=LOG_CHAT_ID,
                text=info,
                message_thread_id=topic_id
            )
        except Exception as e:
            logging.error(f"–ù–µ —Å–æ–∑–¥–∞–ª —Ç–æ–ø–∏–∫: {e}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ª—é–±–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
    try:
        await message.forward(
            chat_id=LOG_CHAT_ID,
            message_thread_id=topic_id
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def main():
    await init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())